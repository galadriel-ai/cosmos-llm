// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmosllm/inference/inferencerun_response.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InferencerunResponse struct {
	RunId      uint64   `protobuf:"varint,1,opt,name=runId,proto3" json:"runId,omitempty"`
	Responses  []string `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	Responders []string `protobuf:"bytes,3,rep,name=responders,proto3" json:"responders,omitempty"`
	Isfinished bool     `protobuf:"varint,4,opt,name=isfinished,proto3" json:"isfinished,omitempty"`
}

func (m *InferencerunResponse) Reset()         { *m = InferencerunResponse{} }
func (m *InferencerunResponse) String() string { return proto.CompactTextString(m) }
func (*InferencerunResponse) ProtoMessage()    {}
func (*InferencerunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba741d80f6b10e6, []int{0}
}
func (m *InferencerunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferencerunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferencerunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferencerunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferencerunResponse.Merge(m, src)
}
func (m *InferencerunResponse) XXX_Size() int {
	return m.Size()
}
func (m *InferencerunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InferencerunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InferencerunResponse proto.InternalMessageInfo

func (m *InferencerunResponse) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *InferencerunResponse) GetResponses() []string {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *InferencerunResponse) GetResponders() []string {
	if m != nil {
		return m.Responders
	}
	return nil
}

func (m *InferencerunResponse) GetIsfinished() bool {
	if m != nil {
		return m.Isfinished
	}
	return false
}

func init() {
	proto.RegisterType((*InferencerunResponse)(nil), "cosmosllm.inference.InferencerunResponse")
}

func init() {
	proto.RegisterFile("cosmosllm/inference/inferencerun_response.proto", fileDescriptor_1ba741d80f6b10e6)
}

var fileDescriptor_1ba741d80f6b10e6 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4f, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xce, 0xc9, 0xc9, 0xd5, 0xcf, 0xcc, 0x4b, 0x4b, 0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0x45,
	0xb0, 0x8a, 0x4a, 0xf3, 0xe2, 0x8b, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0xf5, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0x1a, 0xf4, 0xe0, 0xca, 0x94, 0xba, 0x18, 0xb9, 0x44, 0x3c,
	0x91, 0x34, 0x05, 0x41, 0xf5, 0x08, 0x89, 0x70, 0xb1, 0x16, 0x95, 0xe6, 0x79, 0xa6, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x38, 0x42, 0x32, 0x5c, 0x9c, 0x30, 0x53, 0x8b, 0x25, 0x98,
	0x14, 0x98, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x72, 0x5c, 0x5c, 0x10, 0x4e, 0x4a, 0x6a, 0x51,
	0xb1, 0x04, 0x33, 0x58, 0x1a, 0x49, 0x04, 0x24, 0x9f, 0x59, 0x9c, 0x96, 0x99, 0x97, 0x59, 0x9c,
	0x91, 0x9a, 0x22, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x11, 0x84, 0x24, 0xe2, 0x64, 0x76, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x32, 0x10, 0xb7, 0xeb, 0x82, 0x7c, 0x5b, 0x81,
	0xe4, 0xdf, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x07, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2c, 0x5f, 0xb8, 0xec, 0x13, 0x01, 0x00, 0x00,
}

func (m *InferencerunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferencerunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferencerunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Isfinished {
		i--
		if m.Isfinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Responders) > 0 {
		for iNdEx := len(m.Responders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Responders[iNdEx])
			copy(dAtA[i:], m.Responders[iNdEx])
			i = encodeVarintInferencerunResponse(dAtA, i, uint64(len(m.Responders[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Responses[iNdEx])
			copy(dAtA[i:], m.Responses[iNdEx])
			i = encodeVarintInferencerunResponse(dAtA, i, uint64(len(m.Responses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RunId != 0 {
		i = encodeVarintInferencerunResponse(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInferencerunResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovInferencerunResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InferencerunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunId != 0 {
		n += 1 + sovInferencerunResponse(uint64(m.RunId))
	}
	if len(m.Responses) > 0 {
		for _, s := range m.Responses {
			l = len(s)
			n += 1 + l + sovInferencerunResponse(uint64(l))
		}
	}
	if len(m.Responders) > 0 {
		for _, s := range m.Responders {
			l = len(s)
			n += 1 + l + sovInferencerunResponse(uint64(l))
		}
	}
	if m.Isfinished {
		n += 2
	}
	return n
}

func sovInferencerunResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInferencerunResponse(x uint64) (n int) {
	return sovInferencerunResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InferencerunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferencerunResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferencerunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferencerunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferencerunResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferencerunResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferencerunResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferencerunResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responders = append(m.Responders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isfinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isfinished = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInferencerunResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferencerunResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInferencerunResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInferencerunResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferencerunResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInferencerunResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInferencerunResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInferencerunResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInferencerunResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInferencerunResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInferencerunResponse = fmt.Errorf("proto: unexpected end of group")
)
