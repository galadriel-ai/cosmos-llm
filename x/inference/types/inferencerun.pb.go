// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmosllm/inference/inferencerun.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Inferencerun struct {
	ModelId    uint64 `protobuf:"varint,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
	Prompt     string `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Response   string `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	Isfinished bool   `protobuf:"varint,4,opt,name=isfinished,proto3" json:"isfinished,omitempty"`
	Id         uint64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Inferencerun) Reset()         { *m = Inferencerun{} }
func (m *Inferencerun) String() string { return proto.CompactTextString(m) }
func (*Inferencerun) ProtoMessage()    {}
func (*Inferencerun) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce776c7472c2365, []int{0}
}
func (m *Inferencerun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inferencerun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inferencerun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inferencerun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inferencerun.Merge(m, src)
}
func (m *Inferencerun) XXX_Size() int {
	return m.Size()
}
func (m *Inferencerun) XXX_DiscardUnknown() {
	xxx_messageInfo_Inferencerun.DiscardUnknown(m)
}

var xxx_messageInfo_Inferencerun proto.InternalMessageInfo

func (m *Inferencerun) GetModelId() uint64 {
	if m != nil {
		return m.ModelId
	}
	return 0
}

func (m *Inferencerun) GetPrompt() string {
	if m != nil {
		return m.Prompt
	}
	return ""
}

func (m *Inferencerun) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Inferencerun) GetIsfinished() bool {
	if m != nil {
		return m.Isfinished
	}
	return false
}

func (m *Inferencerun) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Inferencerun)(nil), "cosmosllm.inference.Inferencerun")
}

func init() {
	proto.RegisterFile("cosmosllm/inference/inferencerun.proto", fileDescriptor_5ce776c7472c2365)
}

var fileDescriptor_5ce776c7472c2365 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xce, 0xc9, 0xc9, 0xd5, 0xcf, 0xcc, 0x4b, 0x4b, 0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0x45,
	0xb0, 0x8a, 0x4a, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xea, 0xf4, 0xe0,
	0xb2, 0x4a, 0x3d, 0x8c, 0x5c, 0x3c, 0x9e, 0x48, 0x6a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0xf3, 0x53,
	0x52, 0x73, 0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x60, 0x5c, 0x21, 0x31, 0x2e,
	0xb6, 0x82, 0xa2, 0xfc, 0xdc, 0x82, 0x12, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0x4f,
	0x48, 0x8a, 0x8b, 0xa3, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x82, 0x19, 0x2c, 0x03,
	0xe7, 0x0b, 0xc9, 0x71, 0x71, 0x65, 0x16, 0xa7, 0x65, 0xe6, 0x65, 0x16, 0x67, 0xa4, 0xa6, 0x48,
	0xb0, 0x28, 0x30, 0x6a, 0x70, 0x04, 0x21, 0x89, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0xb0,
	0x82, 0x2d, 0x62, 0xca, 0x4c, 0x71, 0x32, 0x3b, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x19, 0x88, 0xeb, 0x75, 0x41, 0xde, 0xac, 0x40, 0xf2, 0x68, 0x49, 0x65, 0x41, 0x6a,
	0x71, 0x12, 0x1b, 0xd8, 0x8b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x28, 0xbe, 0x80,
	0x0c, 0x01, 0x00, 0x00,
}

func (m *Inferencerun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inferencerun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inferencerun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintInferencerun(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Isfinished {
		i--
		if m.Isfinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintInferencerun(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prompt) > 0 {
		i -= len(m.Prompt)
		copy(dAtA[i:], m.Prompt)
		i = encodeVarintInferencerun(dAtA, i, uint64(len(m.Prompt)))
		i--
		dAtA[i] = 0x12
	}
	if m.ModelId != 0 {
		i = encodeVarintInferencerun(dAtA, i, uint64(m.ModelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInferencerun(dAtA []byte, offset int, v uint64) int {
	offset -= sovInferencerun(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Inferencerun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModelId != 0 {
		n += 1 + sovInferencerun(uint64(m.ModelId))
	}
	l = len(m.Prompt)
	if l > 0 {
		n += 1 + l + sovInferencerun(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovInferencerun(uint64(l))
	}
	if m.Isfinished {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovInferencerun(uint64(m.Id))
	}
	return n
}

func sovInferencerun(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInferencerun(x uint64) (n int) {
	return sovInferencerun(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Inferencerun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferencerun
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inferencerun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inferencerun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			m.ModelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferencerun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferencerun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferencerun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferencerun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isfinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isfinished = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInferencerun(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferencerun
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInferencerun(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInferencerun
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferencerun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInferencerun
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInferencerun
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInferencerun
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInferencerun        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInferencerun          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInferencerun = fmt.Errorf("proto: unexpected end of group")
)
