// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmosllm/inference/staked_gpu_node.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakedGpuNode struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner        string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Stake        uint64 `protobuf:"varint,3,opt,name=stake,proto3" json:"stake,omitempty"`
	Denom        string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	SuccessCount uint64 `protobuf:"varint,5,opt,name=successCount,proto3" json:"successCount,omitempty"`
	FailCount    uint64 `protobuf:"varint,6,opt,name=failCount,proto3" json:"failCount,omitempty"`
	ModelId      uint64 `protobuf:"varint,7,opt,name=modelId,proto3" json:"modelId,omitempty"`
}

func (m *StakedGpuNode) Reset()         { *m = StakedGpuNode{} }
func (m *StakedGpuNode) String() string { return proto.CompactTextString(m) }
func (*StakedGpuNode) ProtoMessage()    {}
func (*StakedGpuNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70639e418a1ba36, []int{0}
}
func (m *StakedGpuNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakedGpuNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakedGpuNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakedGpuNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakedGpuNode.Merge(m, src)
}
func (m *StakedGpuNode) XXX_Size() int {
	return m.Size()
}
func (m *StakedGpuNode) XXX_DiscardUnknown() {
	xxx_messageInfo_StakedGpuNode.DiscardUnknown(m)
}

var xxx_messageInfo_StakedGpuNode proto.InternalMessageInfo

func (m *StakedGpuNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StakedGpuNode) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StakedGpuNode) GetStake() uint64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *StakedGpuNode) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *StakedGpuNode) GetSuccessCount() uint64 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *StakedGpuNode) GetFailCount() uint64 {
	if m != nil {
		return m.FailCount
	}
	return 0
}

func (m *StakedGpuNode) GetModelId() uint64 {
	if m != nil {
		return m.ModelId
	}
	return 0
}

func init() {
	proto.RegisterType((*StakedGpuNode)(nil), "cosmosllm.inference.StakedGpuNode")
}

func init() {
	proto.RegisterFile("cosmosllm/inference/staked_gpu_node.proto", fileDescriptor_e70639e418a1ba36)
}

var fileDescriptor_e70639e418a1ba36 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xce, 0xc9, 0xc9, 0xd5, 0xcf, 0xcc, 0x4b, 0x4b, 0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0xd5,
	0x2f, 0x2e, 0x49, 0xcc, 0x4e, 0x4d, 0x89, 0x4f, 0x2f, 0x28, 0x8d, 0xcf, 0xcb, 0x4f, 0x49, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x86, 0x2b, 0xd5, 0x83, 0x2b, 0x55, 0xda, 0xcb, 0xc8,
	0xc5, 0x1b, 0x0c, 0x56, 0xee, 0x5e, 0x50, 0xea, 0x97, 0x9f, 0x92, 0x2a, 0xc4, 0xc7, 0xc5, 0x94,
	0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc2, 0xc5, 0x9a,
	0x5f, 0x9e, 0x97, 0x5a, 0x24, 0xc1, 0x04, 0x16, 0x82, 0x70, 0x40, 0xa2, 0x60, 0x5b, 0x24, 0x98,
	0x15, 0x18, 0x35, 0x58, 0x82, 0x20, 0x1c, 0x90, 0x68, 0x4a, 0x6a, 0x5e, 0x7e, 0xae, 0x04, 0x0b,
	0x44, 0x2d, 0x98, 0x23, 0xa4, 0xc4, 0xc5, 0x53, 0x5c, 0x9a, 0x9c, 0x9c, 0x5a, 0x5c, 0xec, 0x9c,
	0x5f, 0x9a, 0x57, 0x22, 0xc1, 0x0a, 0xd6, 0x82, 0x22, 0x26, 0x24, 0xc3, 0xc5, 0x99, 0x96, 0x98,
	0x99, 0x03, 0x51, 0xc0, 0x06, 0x56, 0x80, 0x10, 0x10, 0x92, 0xe0, 0x62, 0xcf, 0xcd, 0x4f, 0x49,
	0xcd, 0xf1, 0x4c, 0x91, 0x60, 0x07, 0xcb, 0xc1, 0xb8, 0x4e, 0x66, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x03, 0xf1, 0xae, 0x2e, 0x28, 0x68, 0x2a, 0x90, 0x02, 0xa7,
	0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x26, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf2, 0x10, 0x7a, 0x0a, 0x40, 0x01, 0x00, 0x00,
}

func (m *StakedGpuNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakedGpuNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakedGpuNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModelId != 0 {
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(m.ModelId))
		i--
		dAtA[i] = 0x38
	}
	if m.FailCount != 0 {
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(m.FailCount))
		i--
		dAtA[i] = 0x30
	}
	if m.SuccessCount != 0 {
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(m.SuccessCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.Stake != 0 {
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStakedGpuNode(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakedGpuNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakedGpuNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakedGpuNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStakedGpuNode(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovStakedGpuNode(uint64(l))
	}
	if m.Stake != 0 {
		n += 1 + sovStakedGpuNode(uint64(m.Stake))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovStakedGpuNode(uint64(l))
	}
	if m.SuccessCount != 0 {
		n += 1 + sovStakedGpuNode(uint64(m.SuccessCount))
	}
	if m.FailCount != 0 {
		n += 1 + sovStakedGpuNode(uint64(m.FailCount))
	}
	if m.ModelId != 0 {
		n += 1 + sovStakedGpuNode(uint64(m.ModelId))
	}
	return n
}

func sovStakedGpuNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakedGpuNode(x uint64) (n int) {
	return sovStakedGpuNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakedGpuNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakedGpuNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakedGpuNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakedGpuNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessCount", wireType)
			}
			m.SuccessCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailCount", wireType)
			}
			m.FailCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			m.ModelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakedGpuNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakedGpuNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakedGpuNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakedGpuNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakedGpuNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakedGpuNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakedGpuNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakedGpuNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakedGpuNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakedGpuNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakedGpuNode = fmt.Errorf("proto: unexpected end of group")
)
